
package ua.nure.itech.jaxws.service;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HelloMessenger", targetNamespace = "http://service.jaxws.itech.nure.ua/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface HelloMessenger {


    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<ua.nure.itech.jaxws.service.HelloResponse>
     */
    @WebMethod(operationName = "hello")
    @RequestWrapper(localName = "hello", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.HelloResponse")
    public Response<HelloResponse> helloAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "hello")
    @RequestWrapper(localName = "hello", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.HelloResponse")
    public Future<?> helloAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<HelloResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.HelloResponse")
    @Action(input = "http://service.jaxws.itech.nure.ua/HelloMessenger/helloRequest", output = "http://service.jaxws.itech.nure.ua/HelloMessenger/helloResponse")
    public String hello(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param from
     * @param value
     * @return
     *     returns javax.xml.ws.Response<ua.nure.itech.jaxws.service.ExchangeResponse>
     */
    @WebMethod(operationName = "exchange")
    @RequestWrapper(localName = "exchange", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Exchange")
    @ResponseWrapper(localName = "exchangeResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.ExchangeResponse")
    public Response<ExchangeResponse> exchangeAsync(
        @WebParam(name = "value", targetNamespace = "")
        double value,
        @WebParam(name = "from", targetNamespace = "")
        String from);

    /**
     * 
     * @param from
     * @param asyncHandler
     * @param value
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "exchange")
    @RequestWrapper(localName = "exchange", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Exchange")
    @ResponseWrapper(localName = "exchangeResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.ExchangeResponse")
    public Future<?> exchangeAsync(
        @WebParam(name = "value", targetNamespace = "")
        double value,
        @WebParam(name = "from", targetNamespace = "")
        String from,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExchangeResponse> asyncHandler);

    /**
     * 
     * @param msg
     * @param from
     * @param value
     * @return
     *     returns double
     * @throws ExchangeException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "exchange", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.Exchange")
    @ResponseWrapper(localName = "exchangeResponse", targetNamespace = "http://service.jaxws.itech.nure.ua/", className = "ua.nure.itech.jaxws.service.ExchangeResponse")
    @Action(input = "http://service.jaxws.itech.nure.ua/HelloMessenger/exchangeRequest", output = "http://service.jaxws.itech.nure.ua/HelloMessenger/exchangeResponse", fault = {
        @FaultAction(className = ExchangeException_Exception.class, value = "http://service.jaxws.itech.nure.ua/HelloMessenger/exchange/Fault/ExchangeException")
    })
    public double exchange(
        @WebParam(name = "value", targetNamespace = "")
        double value,
        @WebParam(name = "from", targetNamespace = "")
        String from,
        @WebParam(name = "msg", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> msg)
        throws ExchangeException_Exception
    ;

}
